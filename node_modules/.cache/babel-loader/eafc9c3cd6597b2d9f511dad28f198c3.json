{"ast":null,"code":"var _jsxFileName = \"/home/davron/Davron/Programming/Codes/practice/netninjacontexttutorial/src/contexts/AuthContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst AuthContextProvider = () => {\n  _s();\n\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const toggleAuth = () => {\n    setIsAuthenticated(!isAuthenticated);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...isAuthenticated,\n      toggleAuth: toggleAuth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/davron/Davron/Programming/Codes/practice/netninjacontexttutorial/src/contexts/AuthContext.jsx"],"names":["React","createContext","useState","AuthContext","AuthContextProvider","isAuthenticated","setIsAuthenticated","toggleAuth","props","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;;AACA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,EAAjC;;AAEP,MAAMG,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCJ,QAAQ,CAAC,KAAD,CAAtD;;AAEA,QAAMK,UAAU,GAAG,MAAM;AACvBD,IAAAA,kBAAkB,CAAC,CAACD,eAAF,CAAlB;AACD,GAFD;;AAGA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE,EAAE,GAAGA,eAAL;AAAsBE,MAAAA,UAAU,EAAEA;AAAlC,KADT;AAAA,cAGGC,KAAK,CAACC;AAHT;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAbD;;GAAML,mB;;KAAAA,mB;AAeN,eAAeA,mBAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\nexport const AuthContext = createContext();\n\nconst AuthContextProvider = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const toggleAuth = () => {\n    setIsAuthenticated(!isAuthenticated);\n  };\n  return (\n    <AuthContext.Provider\n      value={{ ...isAuthenticated, toggleAuth: toggleAuth }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;\n"]},"metadata":{},"sourceType":"module"}